@page "/compute"
@inject HttpClient  Http
@inject NavigationManager  Navigation
@inject IJSRuntime  JSRuntime

<EditForm Model="@criteriaVM" OnValidSubmit="@ComputeNPVAsync">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="col-md-4">
            <div class="card card-default" data-scroll-height="300">
                <div class="card-header justify-content-between align-items-center card-header-border-bottom">
                    <h2>Cash Flows</h2>
                    <div>
                        <button type="button" class="text-black-50 mr-2 font-size-20" @onclick="OpenInputCashFlowModalAsync" tooltip="Add Cash Flow"><i class="mdi mdi-plus-circle-outline"></i></button>
                    </div>
                </div>
                <div class="card-body slim-scroll">

                    @foreach(var cashFlow in criteriaVM.CashFlows)
                    {
                        <div class="media py-3 align-items-center justify-content-between">
                            <div class="d-flex rounded-circle align-items-center justify-content-center mr-3 media-icon iconbox-45 bg-primary text-white">
                                <i class="mdi mdi-currency-php font-size-20"></i>
                            </div>
                            <div class="media-body pr-3 ">
                                <label class="mt-0 mb-1 font-size-15 text-dark">@("₱" + cashFlow.ToString("#,#.##"))</label>
                            </div>
                            <div>
                                <button type="button" class="text-black-50 mr-2 font-size-20" @onclick="async () => await RemoveSelectedCashFlowAsync(cashFlow)" tooltip="Remove Cash Flow"><i class="mdi mdi-close-circle-outline font-size=20"></i></button>
                            </div>
                        </div>
                     }
                </div>
            </div>
            <ValidationMessage For="@(() => criteriaVM.CashFlowHidden)" />
        </div>
        <div class="col-md-8">
            <div class="col-md-12 mb-3">
                <label for="initial">Initial Value</label>
                <InputText class="form-control" id="initial" @bind-Value="criteriaVM.InitialValue" />
                <ValidationMessage For="@(() => criteriaVM.InitialValue)" />
            </div>
            <div class="col-md-12 mb-3">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="lowerDiscount">Lower Bound Discount</label>
                        <InputText class="form-control" id="lowerDiscount" @bind-Value="criteriaVM.LowerBoundDiscountRate" />
                        <ValidationMessage For="@(() => criteriaVM.LowerBoundDiscountRate)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="upperDiscount">Upper Bound Discount</label>
                        <InputText class="form-control" id="upperDiscount" @bind-Value="criteriaVM.UpperBoundDiscountRate" />
                        <ValidationMessage For="@(() => criteriaVM.UpperBoundDiscountRate)" />
                    </div>
                </div>
            </div>
            <div class="col-md-12 mb-3">
                <label for="discountIncrement">Discount Rate Increment</label>
                <InputText class="form-control" id="discountIncrement" @bind-Value="criteriaVM.DiscountRateIncrement" />
                <ValidationMessage For="@(() => criteriaVM.DiscountRateIncrement)" />
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-primary mr-3"><span class="mdi mdi-cached font-size-15" />&nbsp;Compute</button>
        <button type="button" class="btn btn-danger mr-3" @onclick="ClearViewModel"><span class="mdi mdi-eraser font-size-15" />&nbsp;Clear</button>
        <button type="button" class="btn btn-secondary mr-3" @onclick="BackToHome"><span class="mdi mdi-home font-size-15" />&nbsp;Back To Main</button>
    </div>
</EditForm>

<div class="modal fade" id="cashFlowModal" tabindex="-1" role="dialog" aria-labelledby="modalFormTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalFormTitle">Add Cash Flow</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <EditForm Model="@inputCashFlowVM" OnValidSubmit="@AddCashFlowAsync">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="form-group">
                        <label for="inputCashFlow">Enter Cash Flow amount:</label>
                        <InputText class="form-control" id="inputCashFlow" @bind-Value="inputCashFlowVM.InputCashFlow" />
                        <ValidationMessage For="@(() => inputCashFlowVM.InputCashFlow)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary btn-pill">Add Cash Flow</button>
                    <button type="button" class="btn btn-danger btn-pill" data-dismiss="modal">Close</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    private CriteriaViewModel criteriaVM = new CriteriaViewModel();

    private InputCashFlowViewModel inputCashFlowVM = new InputCashFlowViewModel();

    private async Task ComputeNPVAsync()
    {
        var criteria = criteriaVM.MapToModel();
        criteria = await Http.PostJsonAsync<NPVCriteria>("api/NPV", criteria);
        Navigation.NavigateTo("result/" + criteria.ReferenceId);
    }

    private async Task OpenInputCashFlowModalAsync()
    {
        await JSRuntime.InvokeVoidAsync("toggleModal", "cashFlowModal", "show");
    }

    private async Task AddCashFlowAsync()
    {
        criteriaVM.CashFlows.Add(new CashFlowViewModel(Convert.ToDecimal(inputCashFlowVM.InputCashFlow)));
        criteriaVM.CashFlowHidden = string.Join(',', criteriaVM.CashFlows);
        inputCashFlowVM.InputCashFlow = "";
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("toggleModal", "cashFlowModal", "hide");
    }

    private async Task RemoveSelectedCashFlowAsync(CashFlowViewModel cashFlowVM)
    {
        await Task.Run(() =>
        {
            criteriaVM.CashFlows.Remove(cashFlowVM);
            criteriaVM.CashFlowHidden = criteriaVM.CashFlows.Count > 0 ? string.Join(',', criteriaVM.CashFlows) : "";
        });

    }

    private void ClearViewModel()
    {
        criteriaVM.Clear();
        inputCashFlowVM.InputCashFlow = "";
    }

    private void BackToHome()
    {
        Navigation.NavigateTo("");
    }



}
